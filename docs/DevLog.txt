
October 2025

  ///////////////////////////////////////
  /// Upgrading from Android 14 to 15 ///
  ///////////////////////////////////////

  Feature Rework - Changes needed to target Android 15
  â€¢ String.format() Changes
    â€¢ The Android SDK Upgrade Assistant says this method is now more specific about the %x
      parameters it accepts. The documentation specifically calls out %0 as invalid syntax that
      will throw an exception. But I've tested the two usages of this function with a %0 parameter
      in the app on API 35 and everything works. Gonna call it good!
  â€¢ MutableList.removeFirst() and MutableList.removeLast()
    â€¢ These two calls now conflict with another method in MutableCollection of the same name. To
      address this, I've replaced references of both with the slightly more verbose
      MutableList.removeAt(0) and MutableList.removeAt(list.lastIndex).
  â€¢ Intent Security Updates
    â€¢ I won't pretend to fully understand the changes made in API 35. But I've run through all the
      scenarios involving widget setup and update (the places where I use them) and everything
      appears to be working as expected.
  â€¢ Add Edge-To-Edge Support
    â€¢ For now, I'm opting out of this feature. If a certain flag is added to the theme, it can be
      disabled in Android 15 (API 35). That said, the flag will be ignored in Android 16 (API 36),
      enforcing Edge-to-Edge layouts. I'll need to add proper support before that point.
    â€¢ In addition to adding the theme flag, I needed to adjust the margin of the Home screen's
      floating action button for Android 15+. This change can be reverted when I refactor to fully
      support Edge-to-Edge layouts.
  â€¢ There are also lots of text rendering changes that could alter the appearance of apps that use
    fancy fonts or support other languages. Luckily, mine does neither! So I'm off the hook here.



December 2023

  //////////////////////////////////
  /// CrystalNote v1.1 Checklist ///
  //////////////////////////////////

    â€¢ Save note without name for Ayayron

    Feature Rework - Changes needed to target Android 14
    â€¢ Upgrade Gradle (12.09.2023)
    â€¢ Upgrade Kotlin (12.09.2023)
    â€¢ Migrate to AndroidX (12.09.2023)
    â€¢ Migrate to ViewBinding (12.10.2023)
    â€¢ Review Permission Changes (12.14.2023)
      â€¢ App hibernation
      â€¢ Reading from downloads
      â€¢ Writing to txt file
    â€¢ Review Intent Changes (12.14.2023)
      â€¢ Intent filters need to be exported
    â€¢ Review Widget Changes (12.14.2023)
      â€¢ No startActivity() from BroadcastReceiver
      â€¢ New widget configuration method?
    â—¦ Other
      â€¢  Mandatory rounded corners on widgets?? :(
        > It's fine, actually. Don't need to change code & looks decent enough
      â€¢ Update Splash Screen for new APIs (12.23.2023)
      â—¦ v2 key signing for PlayStore upload
      â€¢ Update Version #

    2023 Features
    â€¢ Home Screen Optimization (12.20.2023)
    â€¢ Note Restoration (12.13.2023)
    â€¢ Optional Scroll to Bottom Button (12.17.2023)
    â€¢ Fix Background Before Save New Note Bug (12.23.2023)
    â€¢ Redesign Icon (12.23.2023)
    â€¢ Themed Adaptive Icon (12.17.2023)
    â€¢ New About Screen (12.28.2023)
    â€¢ New Settings/Widget Screens (12.29.2023)
    â€¢ Note Preview in Settings & Expanded Note Options (12.30.2023)
    â€¢ Configurable widget background radius (12.31.2023)
    â€¢ Custom Color Picker for Note/Widget Colors (01.6.24)
      â€¢ New API Widget Preview (01.08.2024)
    â€¢ Archived Notes (01.13.2024)
    â€¢ Refresh themes (01.13.2024)
      â€¢ Darker Night Theme (12.30.2023)
    â€¢ Final Fixes
      â€¢ Increase Action Button Bottom Margin (01.31.2024)
      â€¢ Increase Scroll Button Size (01.31.2024)

    Future Improvements
    â—¦ "System" theme for Dynamic Color on API 12+
    â—¦ Configurable widget title/content alignment
    â—¦ Standardize & Make Dialogs Prettier?
    â—¦ Theme Badges


  /////////////////////////////
  /// Hard-Earned Knowledge ///
  /////////////////////////////

    App Icons
    â€¢ Source: Feather Icons (https://feathericons.com)
    â€¢ For a moment, it looked like 2020 Chris' decision not to document
      where these icons came from was going to make finding the source
      impossible. Lucky for 2023 me, I never deleted the .svg fies from
      my laptop and was able to google the vector source class strings
      until I found a match. I'm so glad I created this document.

    AlertDialog Emulator Issues
    â€¢ AlertDialogs are meant to dim the entire screen behind them when
      shown. This doesn't happen on the emulator, leading me to believe
      the default UI behavior must have changed in newer versions of
      Android. After wasting an entire night trying various layout,
      style, and drawable configurations, it turns out my code was fine.
      The issue is that the "Disable HW overlays" needs to be toggled
      on in the Hardware Accelerated Rendering section of the emulated
      device settings.
    â€¢ It seems like this needs to be set again after each boot. ðŸ˜•

    Editing Plaintext Files Opened From an External App
    â€¢ Storage access permissions for Android API > 29 make editing files
      opened from any external app (like File Manager) a prohibitively
      clunky user experience. Since it's a comparatively minor feature,
      I've simply disabled external plaintext file editing on newer
      versions of Android.
    â€¢ The problem is the access level granted by File Manager's intent.
      The intent only provides view access to the URI it passes, which
      is how CrystalNote is able to open and display a plaintext file's
      contents. However, write access to that same file is not permitted.
      From what I can tell, Google's new storage paradigm doesn't allow
      any method of asking the user for write access to the file beyond
      simply opening a file browser for them to select the document they
      want to edit. For reference, this would be done by creating and
      firing a ACTION_OPEN_DOCUMENT intent:

        val intent = Intent(Intent.ACTION_OPEN_DOCUMENT).apply {
            addCategory(Intent.CATEGORY_OPENABLE)
            type = "text/plain"
            putExtra(DocumentsContract.EXTRA_INITIAL_URI, fileUri)
        }
        startActivityForResult(intent, ACTIVITY_FOR_RESULT_CODE)

    â€¢ This works, but the user experience is a mess. The entire process:

        1. User opens File Manager app. Browses to text file. Taps.
        2. User selects CrystalNote from list of apps.
        3. File is open for viewing in CrystalNote. Cannot be edited.
        4. User taps more menu. Selects "Edit File".
        5. Dialog is shown explaining that user will need to reopen
           the file. User taps continue. System file browser shown.
        6. User finds and taps the file they've already opened one
           more time. File opens in CrystalNote, now in edit mode.
        7. User can finally edit the file.

    â€¢ If the user has to go to this much trouble, they might as well
      just import the note, edit it, and export a new text file. Maybe
      I'll change my mind later. But for now, it isn't worth the hassle.